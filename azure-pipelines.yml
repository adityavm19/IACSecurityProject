trigger: none  # disables CI triggers
pr: none       # disables PR triggers
 # Trigger pipeline on push to main branch

variables:
  azureServiceConnection: 'YourAzureServiceConnectionName'  # Your Azure DevOps Service Connection name
  tfWorkingDirectory: '$(Build.SourcesDirectory)/terraform/template1'
  terraformVersion: '1.0.0'

stages:
- stage: PreDeployChecks
  displayName: 'Run Python-Based Pre-Deployment Script'
  jobs:
    - job: PythonChecks
      displayName: 'Run deploy.py'
      pool:
        name: Default
      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.x'
            addToPath: true
          displayName: 'Use Python 3.x'

        - script: |
            cd $(Build.SourcesDirectory)/scripts/
            python deploy.py --plan
          displayName: 'Run deploy.py script'
          
- stage: Terraform_Init
  displayName: 'Terraform Init'
  jobs:
    - job: Terraform_Init
      displayName: 'Run Terraform Init'
      pool:
        name: Default
      steps:
        - task: TerraformInstaller@1
          inputs:
            terraformVersion: $(terraformVersion)  # Specify Terraform version to install
        - script: |
            cd $(tfWorkingDirectory)
            terraform init
          displayName: 'Terraform Init'

- stage: Terraform_Plan
  displayName: 'Terraform Plan'
  condition: succeeded('Terraform_Init')  # Only run if Terraform init is successful
  jobs:
    - job: Terraform_Plan
      displayName: 'Run Terraform Plan'
      pool:
        name: Default
      steps:
        - task: TerraformInstaller@1
          inputs:
            terraformVersion: $(terraformVersion)  # Ensure Terraform is installed again for this stage
        - script: |
            cd $(tfWorkingDirectory)
            terraform plan -var "resource_group_name=my-dev-rg" -var "storage_account_name=mystorageacc001" -var "location=East US" -out=tfplan
          displayName: 'Terraform Plan'

- stage: Terraform_Apply
  displayName: 'Terraform Apply'
  condition: succeeded('Terraform_Plan')  # Only run if Terraform plan passes
  jobs:
    - job: Terraform_Apply
      displayName: 'Run Terraform Apply'
      pool:
        name: Default
      steps:
        - task: TerraformInstaller@1
          inputs:
            terraformVersion: $(terraformVersion)  # Ensure Terraform is installed again for this stage
        - script: |
            cd $(tfWorkingDirectory)
            terraform apply -auto-approve tfplan
          displayName: 'Terraform Apply'

