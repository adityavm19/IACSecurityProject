trigger: none  # disables CI triggers
pr: none       # disables PR triggers
 # Trigger pipeline on push to main branch



parameters:
  - name: terraformTemplate
    displayName: Select Terraform Template
    type: string
    default: template1
    values:
      - template1
      - template2
      - template3


variables:
  azureServiceConnection: 'YourAzureServiceConnectionName' 
  selectedTemplate: '${{ parameters.terraformTemplate }}' # Your Azure DevOps Service Connection name
  tfWorkingDirectory: '$(Build.SourcesDirectory)/terraform/$(selectedTemplate)'
  terraformVersion: '1.0.0'

stages:
- stage: PreDeployChecks
  displayName: 'Run Python-Based Pre-Deployment Script'
  jobs:
    - job: PythonChecks
      displayName: 'Run deploy.py'
      pool:
        name: Default
      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.x'
            addToPath: true
          displayName: 'Use Python 3.x'

        - script: |
            python -m venv venv
            call venv\Scripts\activate
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            call venv\Scripts\activate
            cd $(Build.SourcesDirectory)/scripts/
            python deploy.py --template ${{ parameters.terraformTemplate }} --plan
          displayName: 'Run deploy.py script'

- stage: Terraform_Init_Plan
  displayName: 'Terraform Init & Plan'
  dependsOn: PreDeployChecks
  condition: succeeded()
  variables:
    selectedTemplate: '${{ parameters.terraformTemplate }}'
    templatePath: '$(Build.SourcesDirectory)/terraform/$(selectedTemplate)'
  jobs:
    - job: TerraformInitAndPlan
      pool:
        name: Default
      steps:
        - task: TerraformInstaller@1
          inputs:
            terraformVersion: $(terraformVersion)

        - script: |
            echo üöÄ Showing current working directory
            cd "$(tfWorkingDirectory)"
            dir

            echo üîÑ Cleaning any existing .terraform
            rmdir /s /q .terraform || echo no .terraform folder

            echo üõ†Ô∏è Running terraform init
            terraform init -input=false -upgrade

            echo üì¶ Showing downloaded providers
            terraform providers

            echo üß™ Running terraform plan
            terraform plan -var "resource_group_name=my-dev-rg" -var "storage_account_name=mystorageacc00xc1" -var "location=East US" -var "subscription_id=$(AZURE_SUBSCRIPTION_ID)" -out=tfplan
            terraform apply -auto-approve tfplan
          displayName: 'Terraform Init + Plan Combined'

        
          



