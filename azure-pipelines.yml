trigger:
  branches:
    include:
      - main  # Trigger pipeline on push to main branch

variables:
  azureServiceConnection: 'YourAzureServiceConnectionName'  # Your Azure DevOps Service Connection name
  tfWorkingDirectory: '$(Build.SourcesDirectory)/terraform'
  terraformVersion: '1.0.0'

stages:
- stage: Security_Checks
  displayName: 'Run Security Scans'
  jobs:
    - job: Security_Scans
      displayName: 'Run Checkov and tfsec'
      pool:
        name: Default
      steps:
        - script: |
            python -m pip install --upgrade pip
            pip install checkov
            curl -L -o tfsec.exe https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-windows-amd64.exe
            rename tfsec-windows-amd64.exe tfsec.exe
            set PATH=%CD%;%PATH%
            checkov -d $(tfWorkingDirectory) --output json --quiet > checkov_results.json
            tfsec $(tfWorkingDirectory) --format json > tfsec_results.json
          displayName: 'Run Checkov and tfsec'
          shell: cmd

- stage: Terraform_Init
  displayName: 'Terraform Init'
  condition: succeeded('Security_Checks')  # Only run if security checks pass
  jobs:
    - job: Terraform_Init
      displayName: 'Run Terraform Init'
      pool:
        name: Default
      steps:
        - task: TerraformInstaller@1
          inputs:
            terraformVersion: $(terraformVersion)  # Specify Terraform version to install
        - script: |
            terraform init  # Run terraform init to initialize the Terraform workspace
          workingDirectory: $(tfWorkingDirectory)

- stage: Terraform_Plan
  displayName: 'Terraform Plan'
  condition: succeeded('Terraform_Init')  # Only run if Terraform init is successful
  jobs:
    - job: Terraform_Plan
      displayName: 'Run Terraform Plan'
      pool:
        name: Default
      steps:
        - task: TerraformInstaller@1
          inputs:
            terraformVersion: $(terraformVersion)  # Ensure Terraform is installed again for this stage
        - script: |
            terraform plan -out=tfplan  # Run terraform plan
          workingDirectory: $(tfWorkingDirectory)

- stage: Terraform_Apply
  displayName: 'Terraform Apply'
  condition: succeeded('Terraform_Plan')  # Only run if Terraform plan passes
  jobs:
    - job: Terraform_Apply
      displayName: 'Run Terraform Apply'
      pool:
        name: Default
      steps:
        - task: TerraformInstaller@1
          inputs:
            terraformVersion: $(terraformVersion)  # Ensure Terraform is installed again for this stage
        - script: |
            terraform apply -auto-approve tfplan  # Apply the Terraform plan
          workingDirectory: $(tfWorkingDirectory)
